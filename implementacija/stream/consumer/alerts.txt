# Volume stats

# volume_stats_df = df.groupBy(window_spec).agg(
#     F.sum("taker_quote_asset_volume").alias("total_taker_quote_asset_volume"),
#     F.avg("taker_quote_asset_volume").alias("avg_taker_quote_asset_volume")
# )

# joined_df = df.join(
#     volume_stats_df,
#     [F.col("open_time").between(volume_stats_df["window.start"], volume_stats_df["window.end"])],
#     "left"
# )

# joined_df = joined_df.withColumn(
#     "is_above_avg",
#     F.when(F.col("taker_quote_asset_volume") > F.col("avg_taker_quote_asset_volume"), 1).otherwise(0)
# )

# final_df = joined_df.groupBy(window_spec).agg(
#     F.sum("total_taker_quote_asset_volume").alias("sum_total_taker_quote_asset_volume"),
#     F.avg("avg_taker_quote_asset_volume").alias("avg_avg_taker_quote_asset_volume"),
#     F.sum("is_above_avg").alias("count_above_avg")
# ).select(
#     F.col("window.start").alias("window_start"),
#     F.col("window.end").alias("window_end"),
#     "sum_total_taker_quote_asset_volume",
#     "avg_avg_taker_quote_asset_volume",
#     "count_above_avg"
# )

final_df = df.groupBy(window_spec).agg(
    F.sum("quote_asset_volume").alias("total_quote_asset_volume"),
    F.avg("quote_asset_volume").alias("avg_quote_asset_volume")
).select(
    F.col("window.start").alias("window_start"),
    F.col("window.end").alias("window_end"),
    "total_quote_asset_volume",
    "avg_quote_asset_volume"
)

df = df.withColumn("minute_start_time", (F.unix_timestamp(F.col(
    "open_time")) - F.unix_timestamp(F.col("open_time")) % 60).cast("timestamp"))
minute_price_df = df.groupBy("pairid", "minute_start_time").agg(
    F.first(F.col("open")).alias("minute_start_price")).alias("minute_price_df")

minute_price_df = minute_price_df.withWatermark(
    "minute_start_time", "5 minutes")

df_alias = df.alias("df_alias")

df_with_start_price = df_alias.withWatermark("minute_start_time", "5 minutes").join(minute_price_df, (F.col("df_alias.pairid") == F.col("minute_price_df.pairid")) &
                                                                                    (F.col("df_alias.minute_start_time") >= F.col("minute_price_df.minute_start_time")), "leftOuter")

threshold = 1
df_with_start_price = df_with_start_price.withColumn("price_change_percent",
                                                     ((F.col("close") - F.col("minute_start_price")) / F.col("minute_start_price")) * 100)

df_with_start_price = df_with_start_price.withColumn("price_alert",
                                                     F.when(F.abs(F.col("price_change_percent")) >= threshold, "ALERT").otherwise("NORMAL"))

alert_df = df_with_start_price.filter(F.col("price_alert") == "ALERT")